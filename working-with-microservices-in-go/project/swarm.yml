version: '3'

services:

  front-end:
    image: arturbaccarin/front-end:1.0.0
    deploy:
      mode: replicated
      replicas: 1

  broker-service:
    image: arturbaccarin/broker-service:1.0.1
    deploy:
      mode: replicated
      replicas: 1

  listener-service:
    image: arturbaccarin/listener-service:1.0.0
    deploy:
      mode: replicated
      replicas: 1

  authentication-service:
    image: arturbaccarin/authentication-service:1.0.0
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5"

  logger-service:
    image: arturbaccarin/logger-service:1.0.0
    deploy:
      mode: replicated
      replicas: 1

  mailer-service:
    image: arturbaccarin/mail-service:1.0.0
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MAIL_DOMAIN: localhost
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      MAIL_ENCRYPTION: none
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      FROM_NAME: "John Smith"
      FROM_ADDRESS: john.smith@example.com

  rabbitmq:
    image: 'rabbitmq:3.9-alpine'
    deploy:
      mode: global

  mailhog:
    image: 'mailhog/mailhog:latest'
    ports:
      - "8025:8025"
    deploy:
      mode: global

  mongo:
    image: 'mongo:4.2.17-bionic'
    ports:
      - "27017:27017"
    deploy:
      mode: global
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo/:/data/db

  postgres:
    image: 'postgres:14.0'
    ports:
      - "5432:5432"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/

# docker swarm init
# docker swarm join-token worker
# docker swarm join-token manager
# docker stack deploy -c swarm.yml myapp
# docker service ls
# docker service sacle myapp_listener-service=3
# update to new version:
# docker service update --image arturbaccarin/logger-service:1.0.1 myapp_logger=service
# if you need to downgrade, only change de version
# docker stack rm myapp (to stop all)
# docker swarm leave --force
# docker build -f broker-service.dockerfile -t arturbaccarin/broker-service:1.0.1 .
# docker push arturbaccarin/broker-service:1.0.1